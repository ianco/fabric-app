export class AssetRegistry {
  static getAllAssetRegistries(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  static getAssetRegistry(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any): any;
  static assetRegistryExists(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any): any;
  static addAssetRegistry(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any, arg5?: any): any;
  constructor(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any, arg5?: any);
  addAll(arg0?: any): any;
  add(arg0?: any): any;
  updateAll(arg0?: any): any;
  update(arg0?: any): any;
  removeAll(arg0?: any): any;
  remove(arg0?: any): any;
  getAll(): any;
  get(arg0?: any): any;
  exists(arg0?: any): any;
  find(arg0?: any): any;
  query(arg0?: any): any;
  resolveAll(): any;
  resolve(arg0?: any): any;
  hasOwnProperty(arg0?: any): any;
  toString(): any;
  toLocaleString(): any;
  valueOf(): any;
  isPrototypeOf(arg0?: any): any;
  propertyIsEnumerable(arg0?: any): any;
  __defineGetter__(arg0?: any, arg1?: any): any;
  __lookupGetter__(arg0?: any): any;
  __defineSetter__(arg0?: any, arg1?: any): any;
  __lookupSetter__(arg0?: any): any;
}
export class BusinessNetworkConnection {
  constructor(arg0?: any);
  getBusinessNetwork(): any;
  getAllAssetRegistries(): any;
  getAssetRegistry(arg0?: any): any;
  existsAssetRegistry(arg0?: any): any;
  assetRegistryExists(arg0?: any): any;
  addAssetRegistry(arg0?: any, arg1?: any): any;
  getAllParticipantRegistries(): any;
  getParticipantRegistry(arg0?: any): any;
  participantRegistryExists(arg0?: any): any;
  addParticipantRegistry(arg0?: any, arg1?: any): any;
  getTransactionRegistry(): any;
  connect(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any): any;
  disconnect(): any;
  submitTransaction(arg0?: any): any;
  ping(): any;
  issueIdentity(arg0?: any, arg1?: any, arg2?: any): any;
  revokeIdentity(arg0?: any): any;
  setMaxListeners(arg0?: any): any;
  getMaxListeners(): any;
  emit(arg0?: any): any;
  addListener(arg0?: any, arg1?: any): any;
  on(arg0?: any, arg1?: any): any;
  prependListener(arg0?: any, arg1?: any): any;
  once(arg0?: any, arg1?: any): any;
  prependOnceListener(arg0?: any, arg1?: any): any;
  removeListener(arg0?: any, arg1?: any): any;
  removeAllListeners(arg0?: any): any;
  listeners(arg0?: any): any;
  listenerCount(arg0?: any): any;
  eventNames(): any;
  hasOwnProperty(arg0?: any): any;
  toString(): any;
  toLocaleString(): any;
  valueOf(): any;
  isPrototypeOf(arg0?: any): any;
  propertyIsEnumerable(arg0?: any): any;
  __defineGetter__(arg0?: any, arg1?: any): any;
  __lookupGetter__(arg0?: any): any;
  __defineSetter__(arg0?: any, arg1?: any): any;
  __lookupSetter__(arg0?: any): any;
}
export class Logger {
  static setFunctionalLogger(arg0?: any): any;
  static getDebugEnv(): any;
  static getLoggerConfig(): any;
  static getLog(arg0?: any): any;
  static _setupLog(arg0?: any): any;
  static reset(): any;
  constructor(arg0?: any);
  intlog(arg0?: any, arg1?: any, arg2?: any): any;
  _intLogMain(arg0?: any, arg1?: any, arg2?: any): any;
  _intLogFirst(arg0?: any, arg1?: any, arg2?: any): any;
  debug(arg0?: any, arg1?: any, arg2?: any): any;
  warn(arg0?: any, arg1?: any, arg2?: any): any;
  info(arg0?: any, arg1?: any, arg2?: any): any;
  verbose(arg0?: any, arg1?: any, arg2?: any): any;
  error(arg0?: any, arg1?: any, arg2?: any): any;
  entry(arg0?: any, arg1?: any): any;
  exit(arg0?: any, arg1?: any): any;
  hasOwnProperty(arg0?: any): any;
  toString(): any;
  toLocaleString(): any;
  valueOf(): any;
  isPrototypeOf(arg0?: any): any;
  propertyIsEnumerable(arg0?: any): any;
  __defineGetter__(arg0?: any, arg1?: any): any;
  __lookupGetter__(arg0?: any): any;
  __defineSetter__(arg0?: any, arg1?: any): any;
  __lookupSetter__(arg0?: any): any;
}
export class ParticipantRegisty {
  static getAllParticipantRegistries(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  static getParticipantRegistry(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any): any;
  static participantRegistryExists(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any): any;
  static addParticipantRegistry(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any, arg5?: any): any;
  constructor(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any, arg5?: any);
  addAll(arg0?: any): any;
  add(arg0?: any): any;
  updateAll(arg0?: any): any;
  update(arg0?: any): any;
  removeAll(arg0?: any): any;
  remove(arg0?: any): any;
  getAll(): any;
  get(arg0?: any): any;
  exists(arg0?: any): any;
  find(arg0?: any): any;
  query(arg0?: any): any;
  resolveAll(): any;
  resolve(arg0?: any): any;
  hasOwnProperty(arg0?: any): any;
  toString(): any;
  toLocaleString(): any;
  valueOf(): any;
  isPrototypeOf(arg0?: any): any;
  propertyIsEnumerable(arg0?: any): any;
  __defineGetter__(arg0?: any, arg1?: any): any;
  __lookupGetter__(arg0?: any): any;
  __defineSetter__(arg0?: any, arg1?: any): any;
  __lookupSetter__(arg0?: any): any;
}
export class TransactionRegistry {
  static getAllTransactionRegistries(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  static getTransactionRegistry(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any): any;
  static addTransactionRegistry(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any, arg5?: any): any;
  constructor(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any, arg5?: any);
  add(arg0?: any): any;
  addAll(arg0?: any): any;
  update(arg0?: any): any;
  updateAll(arg0?: any): any;
  remove(arg0?: any): any;
  removeAll(arg0?: any): any;
  addAll(arg0?: any): any;
  add(arg0?: any): any;
  updateAll(arg0?: any): any;
  update(arg0?: any): any;
  removeAll(arg0?: any): any;
  remove(arg0?: any): any;
  getAll(): any;
  get(arg0?: any): any;
  exists(arg0?: any): any;
  find(arg0?: any): any;
  query(arg0?: any): any;
  resolveAll(): any;
  resolve(arg0?: any): any;
  hasOwnProperty(arg0?: any): any;
  toString(): any;
  toLocaleString(): any;
  valueOf(): any;
  isPrototypeOf(arg0?: any): any;
  propertyIsEnumerable(arg0?: any): any;
  __defineGetter__(arg0?: any, arg1?: any): any;
  __lookupGetter__(arg0?: any): any;
  __defineSetter__(arg0?: any, arg1?: any): any;
  __lookupSetter__(arg0?: any): any;
}
