export class Container {
  constructor();
  getVersion(): any;
  getLoggingService(): any;
  toJSON(): any;
}
export class Context {
  static getCachedBusinessNetwork(arg0?: any): any;
  static cacheBusinessNetwork(arg0?: any, arg1?: any): any;
  static getCachedCompiledScriptBundle(arg0?: any): any;
  static cacheCompiledScriptBundle(arg0?: any, arg1?: any): any;
  constructor(arg0?: any);
  loadBusinessNetworkRecord(): any;
  loadBusinessNetworkDefinition(arg0?: any): any;
  loadCompiledScriptBundle(arg0?: any, arg1?: any): any;
  loadCurrentParticipant(): any;
  findBusinessNetworkDefinition(arg0?: any): any;
  findCompiledScriptBundle(arg0?: any, arg1?: any): any;
  initialize(arg0?: any): any;
  getServices(): any;
  getDataService(): any;
  getIdentityService(): any;
  getQueryService(): any;
  getHTTPService(): any;
  getEventService(): any;
  getModelManager(): any;
  getScriptManager(): any;
  getAclManager(): any;
  getFactory(): any;
  getSerializer(): any;
  getIntrospector(): any;
  getRegistryManager(): any;
  getResolver(): any;
  getApi(): any;
  getQueryExecutor(): any;
  getIdentityManager(): any;
  getParticipant(): any;
  setParticipant(arg0?: any): any;
  getTransaction(): any;
  setTransaction(arg0?: any): any;
  getAccessController(): any;
  getSystemRegistries(): any;
  getSystemIdentities(): any;
  getEventNumber(): any;
  incrementEventNumber(): any;
  getScriptCompiler(): any;
  getCompiledScriptBundle(): any;
  transactionStart(arg0?: any): any;
  transactionPrepare(): any;
  transactionRollback(): any;
  transactionCommit(): any;
  transactionEnd(): any;
  toJSON(): any;
}
export class DataCollection {
  constructor(arg0?: any);
  getAll(): any;
  _getAll(arg0?: any): any;
  get(arg0?: any): any;
  _get(arg0?: any, arg1?: any): any;
  exists(arg0?: any): any;
  _exists(arg0?: any, arg1?: any): any;
  add(arg0?: any, arg1?: any, arg2?: any): any;
  _add(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  update(arg0?: any, arg1?: any): any;
  _update(arg0?: any, arg1?: any, arg2?: any): any;
  remove(arg0?: any): any;
  _remove(arg0?: any, arg1?: any): any;
  toJSON(): any;
}
export class DataService {
  constructor();
  createCollection(arg0?: any, arg1?: any): any;
  _createCollection(arg0?: any, arg1?: any, arg2?: any): any;
  deleteCollection(arg0?: any): any;
  _deleteCollection(arg0?: any, arg1?: any): any;
  getCollection(arg0?: any): any;
  _getCollection(arg0?: any, arg1?: any): any;
  existsCollection(arg0?: any): any;
  _existsCollection(arg0?: any, arg1?: any): any;
  toJSON(): any;
}
export class Engine {
  constructor(arg0?: any);
  getContainer(): any;
  installLogger(): any;
  init(arg0?: any, arg1?: any, arg2?: any): any;
  _init(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  invoke(arg0?: any, arg1?: any, arg2?: any): any;
  _invoke(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  query(arg0?: any, arg1?: any, arg2?: any): any;
  _query(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  ping(arg0?: any, arg1?: any): any;
  toJSON(): any;
  getBusinessNetwork(arg0?: any, arg1?: any): any;
  undeployBusinessNetwork(arg0?: any, arg1?: any): any;
  updateBusinessNetwork(arg0?: any, arg1?: any): any;
  resetBusinessNetwork(arg0?: any, arg1?: any): any;
  addParticipantIdentity(arg0?: any, arg1?: any): any;
  removeIdentity(arg0?: any, arg1?: any): any;
  getAllRegistries(arg0?: any, arg1?: any): any;
  getRegistry(arg0?: any, arg1?: any): any;
  existsRegistry(arg0?: any, arg1?: any): any;
  addRegistry(arg0?: any, arg1?: any): any;
  getAllResourcesInRegistry(arg0?: any, arg1?: any): any;
  getResourceInRegistry(arg0?: any, arg1?: any): any;
  existsResourceInRegistry(arg0?: any, arg1?: any): any;
  addAllResourcesToRegistry(arg0?: any, arg1?: any): any;
  addResourceToRegistry(arg0?: any, arg1?: any): any;
  updateAllResourcesInRegistry(arg0?: any, arg1?: any): any;
  updateResourceInRegistry(arg0?: any, arg1?: any): any;
  removeAllResourcesFromRegistry(arg0?: any, arg1?: any): any;
  removeResourceFromRegistry(arg0?: any, arg1?: any): any;
  resolveAllResourcesInRegistry(arg0?: any, arg1?: any): any;
  resolveResourceInRegistry(arg0?: any, arg1?: any): any;
  findResourcesInRegistry(arg0?: any, arg1?: any): any;
  queryResourcesInRegistry(arg0?: any, arg1?: any): any;
  submitTransaction(arg0?: any, arg1?: any): any;
}
export class EventService {
  constructor();
  emit(arg0?: any): any;
  getEvents(): any;
  transactionStart(arg0?: any): any;
  toJSON(): any;
}
export class HTTPService {
  constructor();
  post(arg0?: any, arg1?: any): any;
  _post(): any;
  toJSON(): any;
}
export class IdentityService {
  constructor();
  getCurrentUserID(): any;
  toJSON(): any;
}
export class LoggingService {
  constructor();
  logCritical(arg0?: any): any;
  logDebug(arg0?: any): any;
  logError(arg0?: any): any;
  logInfo(arg0?: any): any;
  logNotice(arg0?: any): any;
  logWarning(arg0?: any): any;
  toJSON(): any;
}
export class QueryService {
  constructor();
  queryNative(arg0?: any): any;
  _queryNative(arg0?: any, arg1?: any): any;
  toJSON(): any;
}
export class ScriptCompiler {
  constructor();
  compile(arg0?: any): any;
  processScriptManager(arg0?: any, arg1?: any): any;
  processScript(arg0?: any, arg1?: any): any;
  convertScriptToSourceMap(arg0?: any, arg1?: any): any;
  convertScriptToScriptNode(arg0?: any, arg1?: any): any;
  transformScript(arg0?: any, arg1?: any, arg2?: any): any;
}
